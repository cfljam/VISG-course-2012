.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "KOCOS 1"
.TH KOCOS 1 "2008-03-25" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
kocos.pl \- Find the Kth order co\-occurrences of a word
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This program finds the Kth order co-occurrences of a given word. 
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "1. What are Kth order co\-occurrences?"
.IX Subsection "1. What are Kth order co-occurrences?"
Co-occurrences are the words which occur together in the same context. All 
words which co-occur with a given target word are called its co\-occurrences. 
The concept of 2nd order co-occurrences is explained in the paper Automatic 
word Sense Discrimination [Schutze98]. According to this paper, the words 
which co-occur with the co-occurring words of a target word are called as the 
2nd order co-occurrences of that word. 
.PP
So with each increasing order of co\-occurrences, we introduce an extra level 
of indirection and find words co-occurring with the previous order 
co\-occurrences.  
.PP
We generalize the concept of 2nd order co-occurrences from [Schutze98] to find
the Kth order co-occurrences of a word. These are the words that co-occur 
with the (K\-1)th order co-occurrences of a given target word.
.PP
We have also found [Niwa&Nitta94] to be related to kocos. While we do not 
exactly reimplement the co-occurrence vectors they propose, we feel that 
kocos is at least similar in spirit.
.Sh "2. Usage"
.IX Subsection "2. Usage"
Usage: kocos.pl [\s-1OPTIONS\s0] \s-1BIGRAM\s0
.Sh "3. Input"
.IX Subsection "3. Input"
\fI3.1 \s-1BIGRAM\s0\fR
.IX Subsection "3.1 BIGRAM"
.PP
Specify the \s-1BIGRAM\s0 file name on the command line after the program name and 
options (if any) as shown in the usage note. 
.PP
\&\s-1BIGRAM\s0 should be a bigram output(normal or extended) created by \s-1NSP\s0 programs \- 
count.pl, statistic.pl or combig.pl. When count.pl and statistic.pl are run for 
creating bigrams (\-\-ngram set to 2 or not specified), the programs list the 
bigrams of all words which co-occur together(in certain window). So we can
say that if a bigram 'word1<>word2<>' is listed in the output of count.pl
or statistic.pl program, it means that the words word1 and word2 are the 
co-occurrences of each other.
.PP
In general you may want to consider the use of stop lists (\-\-stop option  
in count.pl) to remove very common words such as \*(L"the\*(R" and \*(L"for\*(R", and 
also eliminate low frequency bigrams (\-\-remove option in count.pl). The  
stop list is particularly  important as high frequency words such as \*(L"the\*(R" 
or \*(L"for\*(R" will co-occur with many different words, and greatly expand the  
search needed to find kth order co\-occurrences. 
.PP
If you want to run kocos.pl on a source file not created by either count 
or statistic program of this package, just make sure that each line of \s-1BIGRAM\s0 
file will list two words \s-1WORD1\s0 and \s-1WORD2\s0 as 
WORD1<>WORD2<> 
The program minimally requires that there are exactly two words and they are 
separated by delimiter '<>' with an extra delimiter '<>' after the second
word. So you may convert any non \s-1NSP\s0 input to this format where two words 
occurring in the same context are '<>' separated and provide it to kocos.  
.PP
Controlling scope of the context
.PP
You may like to call two words as co-occurrences of each other if they occur 
within a specific distance from each other. We encourage in this case that you 
use \-\-window w option of \s-1NSP\s0 program count.pl while creating a \s-1BIGRAM\s0 file. This 
will create bigrams of all words which co-occur within a distance w from each 
other. Thus \-\-window w sets the maximum distance allowed between two words to 
call them co-occurrences of each other. 
.PP
Note that if the \-\-window option is not used while creating \s-1BIGRAM\s0 input
for kocos, only those words which come immediately next to each other will
be considered as the co-occurrences (default window size being 2 for bigrams).
.Sh "4. Options"
.IX Subsection "4. Options"
\fI4.1 \-\-literal \s-1WORD\s0\fR
.IX Subsection "4.1 --literal WORD"
.PP
With this option, the target \s-1WORD\s0 whose kth order co-occurrences are to be
found can be directly specified on the command line.
.PP
e.g.
        kocos.pl \-\-literal line test.input
will find the 1st order co-occurrences (by default) of the word 'line' using 
Bigrams listed in file test.input.
.PP
.Vb 2
\&        kocos.pl --literal , --order 3 test.input 
\&will find 3rd order co-occurrences of ',' from file test.input.
.Ve
.PP
\fI4.2 \-\-regex \s-1REGEXFILE\s0\fR
.IX Subsection "4.2 --regex REGEXFILE"
.PP
With this option, target word can be specified using Perl regular expression/s.
The regex/s should be written in a file and multiple regex/s should either 
appear on separate lines or should be Perl '\s-1OR\s0' (|) separated. 
.PP
We provide this option to allow user to specify various morphological
variants of the target word e.g. line, lines, Line,Lines etc.
.PP
e.g.
(1) let test.regex contains a regular expression for target word which is \-
 /^[Ll]ines?$/
.PP
To use this for finding kocos, run kocos.pl with command
.PP
.Vb 1
\&        kocos.pl --regex test.regex --order K test.input
.Ve
.PP
(2) To find say 2nd order co-occurrences of any general target word which occurs in
Data in <head> tags like Senseval Format,
we use a regular expression
 /^<head.*>\ew+</head>$/
in our regex file say test.regex
and run kocos.pl using command
.PP
.Vb 1
\&        kocos.pl --regex test.regex --order 2 eng-lex-sample.training.xml
.Ve
.PP
(3) To find 3rd order co-occurrences of any word that contains period '.'
run kocos.pl using 
.PP
.Vb 1
\&        kocos.pl --literal . --order 3 test.input
.Ve
.PP
Or write a regex /\e./ in file say test.regex and run kocos using 
.PP
.Vb 1
\&        kocos.pl --regex test.regex --order 3 test.input
.Ve
.PP
(4) To find 2nd order co-occurrences of all words that are numbers, 
write a regex like /^\ed+$/ to a regexfile say test.regex and run kocos 
using, 
.PP
.Vb 1
\&        kocos.pl --regex test.regex --order 2 test.input
.Ve
.PP
Note: writing a regex /\ed+/ will also match words like line20.1.cord, or 
art%10.fine456 that include numbers. 
.PP
Regex/s that should exactly match as target words should be delimited by 
^ and $ as in /^[Ll]ines?$/. Specifying something like /[Ll]ines?/ will
match with 'incline'. 
.PP
Note \- The program kocos.pl requires that the target word is specified using
either of the options \-\-literal or \-\-regex
.PP
\fI4.3 \-\-order K\fR
.IX Subsection "4.3 --order K"
.PP
If the value of K is specified using the command line option \-\-order K,
kocos.pl will find the Kth order co-occurrences of the target word. K can
take any integer value greater than 0. If the value of K is not specified,
the program will set K to 1 and will simply find the co-occurrences of the
target (the word co-occurrence generally means first order co\-occurrences).  
.PP
\fI4.4 \-\-trace \s-1TRACEFILE\s0\fR
.IX Subsection "4.4 --trace TRACEFILE"
.PP
To see a detailed report of how each Kth order co-occurrence is reached as a 
sequence of K words, specify the name of a \s-1TRACEFILE\s0 on the command line 
using \-\-trace \s-1TRACEFILE\s0 option. 
.PP
\&\s-1TRACEFILE\s0 will show the chains of K+1 words where the first word is the \s-1TARGET\s0 
word and every ith word in the chain is a (i\-1)th order co-occurrence of target 
which co-occurs with (i\-1)th word in the chain. So a chain of K+1 words, 
.PP
.Vb 1
\& TARGET->COC1->COC2->COC3....->COCK-1->COCK
.Ve
.PP
shows that \s-1COC1\s0 is a first order co-occurrence of the \s-1TARGET\s0. 
.PP
.Vb 4
\& COC2 is a second order co-occurrence such that COC2 co-occurs with 
\& COC1 which in turn co-occurs with the TARGET. 
\& COC3 is a third order co-occurrence such that COC3 co-occurs with
\& COC2 which in turn co-occurs with COC1 which co-occurs with TARGET.
.Ve
.PP
and so on......  
.PP
\fI4.6 \-\-help\fR
.IX Subsection "4.6 --help"
.PP
This option will display the help message.
.PP
\fI4.7 \-\-version\fR
.IX Subsection "4.7 --version"
.PP
This option will display version information of the program.
.Sh "5. Output"
.IX Subsection "5. Output"
The program will display a list of Kth order co-occurrences to standard 
output  such that each co-occurrence occurs on a separate line and is 
followed by '<>' (just to be compatible with other programs in \s-1NSP\s0).  
.PP
Note that the output of kocos.pl could be directly used by the program   
nsp2regex of the SenseTools Package (by Satanjeev Banerjee and Ted  
Pedersen) to convert Senseval data instances into feature vectors in \s-1ARFF\s0  
format where our Kth order co-occurrences are used as features. 
.PP
For more information on SenseTools you can refer to its \s-1README:\s0
http://www.d.umn.edu/~tpederse/sensetools.html
.PP
.Vb 1
\&                                IMPORTANT NOTE
.Ve
.PP
If there are some kth order co-occurrences which are also the ith order
co-occurrences (0<i<k) of the target word, program kocos.pl will not
display them as the Kth order co\-occurrences. kocos.pl displays only those 
words as Kth order co-occurrences whose minimum distance from target word
is K in the co-occurrence graph.
[Co\-occurrence graph shows a network of words where a word is connected to 
all words it co-occurs with.]
.Sh "6. Usage examples"
.IX Subsection "6. Usage examples"
(a)	Using default value of order 
To find the (1st order) co-occurrences of a word 'line' from the \s-1BIGRAM\s0 file 
test.input, run kocos.pl using the following command. 
 	kocos.pl \-\-literal line test.input 
.PP
(b)	Using option order 
To find the 2nd order co-occurrences of a word 'line' from the \s-1BIGRAM\s0 file
test.input, run kocos.pl using the following command.
	kocos.pl \-\-literal line \-\-order 2 test.input 
.PP
(c)	Using the trace option
To see how the 4th order co-occurrences of a word 'line' is reached as a 
sequence of words which form a co-occurrence chain, run kocos.pl using the
following command.
	kocos.pl \-\-literal line \-\-order 4 \-\-trace test.trace test.input 
.PP
(d) 	Using a Regex to specify the target word
To find Kth order co-occurrences of a target word 'line' which is specified as 
a Perl regular expression say /^[Ll]ines?$/ in a file test.regex, 
run kocos.pl using 
	kocos.pl \-\-regex test.regex \-\-order K test.input
.PP
(e) 	Using a generic Regex for Data like Senseval\-2,
To find 2nd order co-occurrences of a target word that occurs in <head> tags
in the data file eng\-lex\-sample.training.xml, use a regular expression like
/<head>\ew+</head>/ from a file say test.regex, and run kocos.pl using
	kocos.pl \-\-regex test.regex \-\-order 2 test.input
.Sh "7. General Recommendations"
.IX Subsection "7. General Recommendations"
(a) Create a \s-1BIGRAM\s0 file using programs count.pl, statistic.pl or combig.pl
    of \s-1NSP\s0 Package. 
(b) Use \-\-window W option of program count.pl to specify the scope of the 
    context. Any word that occurs within a distance W from a target word will be
    treated as its co\-occurrence.
(c) Use either \-\-literal or \-\-regex option to specify the target word. We
    recommend use of regex support to detect forms of target word other than
    its base form.
.Sh "8. Examples of Kth order co-occurrences"
.IX Subsection "8. Examples of Kth order co-occurrences"
In all the following examples, we assume that the input comes from the file 
test.input and word 'line' is a target word. 
.PP
.Vb 10
\& test.input =>                  
\& ----------------
\& print<>in<>    |
\& print<>line<>  |
\& text<>the<>    |
\& text<>line<>   |
\& file<>the<>    |
\& file<>in<>     |
\& line<>file     |
\& ----------------
.Ve
.PP
(Note that test.input doesn't look like a valid count/statistic output because 
kocos.pl will minimally require two words \s-1WORD1\s0 and \s-1WORD2\s0 separated by '<>' 
with an extra '<>' after \s-1WORD2\s0 as described in Section 3.1 of this \s-1README\s0) 
.PP
(a)	The 1st order co-occurrences of word 'line' can be found by 	
	running kocos.pl with either of the following commands \-
.PP
.Vb 3
\&        kocos.pl --literal line test.input 
\&                OR
\&        kocos.pl --order 1 --literal line test.input
.Ve
.PP
This will display the co-occurrences of 'line' to standard output as shown
below in the box. 
.PP
.Vb 5
\& --------       
\& text<> |
\& file<> |
\& print<>|
\& --------
.Ve
.PP
This is because the program finds the bigrams 
.PP
.Vb 3
\& print<>line<>
\& text<>line<>
\& line<>file<>
.Ve
.PP
where word 'line' co-occurs with the words print, text and file which become 
the 1st order co\-occurrences. 
.PP
(b)     The 2nd order co-occurrences of word 'line' can be found by 
	running kocos.pl with the following command \-
        kocos.pl \-\-literal line \-\-order 2 test.input 
.PP
This will display the 2nd order co-occurrences of 'line' to standard output 
as shown below in the box.
.PP
.Vb 4
\& --------
\& the<>  |
\& in<>   |
\& --------
.Ve
.PP
This is because the program finds the words print, text and file as the 
first order co-occurrences (as explained in case a) and finds bigrams 
.PP
.Vb 4
\& print<>in<>
\& text<>the<>
\& file<>the<>
\& file<>in
.Ve
.PP
where 'the' and 'in' co-occur with the words print, text, file.  
.PP
(c)     To see how the 2nd order co-occurrences of word 'line' are reached 
	run the program using the following command \-
        kocos.pl \-\-order 2 \-\-trace test.trace test.input line
.PP
This will display the 2nd order co-occurrences of 'line' to standard output
as shown below in the box.
.PP
.Vb 4
\& --------
\& the<>   |
\& in<>    |
\& --------
.Ve
.PP
and a detailed report of co-occurrence chains in test.trace file as shown 
in the box below. 
.PP
.Vb 1
\& test.trace =>
.Ve
.PP
.Vb 6
\& ----------------
\& line->text->the|
\& line->file->the|
\& line->file->in |
\& line->print->in|
\& ----------------
.Ve
.PP
where  
the first line shows that the word 'line' co-occurred with 'text' which
co-occurred with 'the'. Hence 'the' became a 2nd order co\-occurrence. 
Similarly, 'line' co-occurred with 'file' which in turn co-occurred with 
\&'the' and 'in' which are therefore the 2nd order co-occurrences of 'line'.
.Sh "11. References"
.IX Subsection "11. References"
[Niwa&Nitta94] Y. Niwa and Y. Nitta. Co-occurrence vectors from corpora 
vs. distance vectors from dictionaries. \s-1COLING\-1994\s0.
.PP
[Schutze98] H. Schutze. Automatic word sense discrimination. Computational
Linguistics,24(1):97\-123,1998.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\& Amruta Purandare, pura0010@umn.edu
\& Ted Pedersen, tpederse@umn.edu
.Ve
.PP
.Vb 1
\& Last updated on 12/05/2003 by TDP
.Ve
.PP
This work has been partially supported by a National Science Foundation
Faculty Early \s-1CAREER\s0 Development award (#0092784).
.SH "BUGS"
.IX Header "BUGS"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
http://www.d.umn.edu/~tpederse/nsp.html
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2002\-2003, Amruta Purandare and Ted Pedersen
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT\s0
\&\s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0
\&\s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0. See the \s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to
.PP
The Free Software Foundation, Inc.,
59 Temple Place \- Suite 330,
Boston, \s-1MA\s0  02111\-1307, \s-1USA\s0.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\& Amruta Purandare, University of Minnesota, Duluth,  pura0010@d.umn.edu
\& Ted Pedersen, University of Minnesota, Duluth,  tpederse@umn.edu
.Ve
.SH "BUGS"
.IX Header "BUGS"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
http://www.d.umn.edu/~tpederse/nsp.html
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2002\-2003, Amruta Purandare & Ted Pedersen
.PP
This program is free software; you can redistribute it and/or modify it  
under the terms of the \s-1GNU\s0 General Public License as published by the Free  
Software Foundation; either version 2 of the License, or (at your option)  
any later version.
.PP
This program is distributed in the hope that it will be useful, but  
\&\s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0  
 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0 General Public License 
for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along  
with this program; if not, write to
.PP
The Free Software Foundation, Inc.,
59 Temple Place \- Suite 330,
Boston, \s-1MA\s0  02111\-1307, \s-1USA\s0.
