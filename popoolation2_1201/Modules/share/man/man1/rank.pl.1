.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RANK 1"
.TH RANK 1 "2012-01-16" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
rank.pl \- Calculate Spearman\(aqs Correlation on two ranked lists output by count.pl or statistic.pl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Program to calculate the rank correlation coefficient between the rankings
generated by two different statistical measures on the same
bigram-frequency (as output by count.pl).
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "1. Introduction"
.IX Subsection "1. Introduction"
This is a program that is meant to be used to compare two different  
statistical measures of association. Given the same set of n\-grams ranked  
in two different ways by two different statistical measures, this program  
computes Spearman's rank correlation coefficient between the two rankings.  
.PP
\fI1.2. Typical Way to Run rank.pl:\fR
.IX Subsection "1.2. Typical Way to Run rank.pl:"
.PP
Assume that test.cnt is a list of n\-grams with their frequencies as
output by program count.pl. Assume that we wish to test the
dis/similarity of the statistical measures 'dice' and 'x2' with
respect to the n\-grams contained in test.cnt. To do so, we must first
rank the n\-grams using these two statistical measures using program
statistic.pl. 
.PP
.Vb 2
\& perl statistic.pl dice test.dice test.cnt
\& perl statistic.pl x2 test.x2 test.cnt
.Ve
.PP
Having obtained two different rankings of the n\-grams in test.cnt in
files test.dice and test.x2, we can now compute the Spearman's rank
correlation coefficient using these two rankings like so: 
.PP
.Vb 1
\& perl rank.pl test.dice test.x2.
.Ve
.PP
This will output a floating point number between \-1 and 1. A return of
\&'1' indicates a perfect match in rankings, '\-1' a completely reversed
ranking and '0' a pair of rankings that are completely unrelated to
each other. Numbers that lie between these numbers indicate various
degrees of relatedness / un-relatedness / reverse\-relatedness.
.PP
\fI1.3. Re-Ranking the Ngrams:\fR
.IX Subsection "1.3. Re-Ranking the Ngrams:"
.PP
Recall that program statistic.pl ranks n\-grams in such a way that the
fact that an ngram has a rank 'r' implies that there are 'r\-1'
distinct scores greater than the score of this ngram. Thus say if 'k'
n\-grams are tied at a score with rank 'a', then the next highest
scoring n\-grams is given a rank 'a+1' instead of 'a+k+1'. 
.PP
For example, observe the following file output by statistic.pl: 
.PP
.Vb 10
\& 11
\& of<>text<>1 1.0000 2 2 2
\& and<>a<>1 1.0000 1 1 1
\& a<>third<>1 1.0000 1 1 1
\& text<>second<>1 1.0000 1 1 1
\& line<>of<>2 0.8000 2 3 2
\& third<>line<>3 0.5000 1 1 3
\& line<>and<>3 0.5000 1 3 1
\& second<>line<>3 0.5000 1 1 3
\& first<>line<>3 0.5000 1 1 3
.Ve
.PP
Observe that although 4 bigrams have a rank of 1, the next highest
scoring bigram is not ranked 5, but instead 2. 
.PP
Spearman's rank correlation coefficient requires the more conventional
kind of ranking. Thus the above file is first \*(L"re\-ranked\*(R" to the
following: 
.PP
.Vb 10
\& 11
\& of<>text<>1 1.0000 2 2 2
\& and<>a<>1 1.0000 1 1 1
\& a<>third<>1 1.0000 1 1 1
\& text<>second<>1 1.0000 1 1 1
\& line<>of<>5 0.8000 2 3 2
\& third<>line<>6 0.5000 1 1 3
\& line<>and<>6 0.5000 1 3 1
\& second<>line<>6 0.5000 1 1 3
\& first<>line<>6 0.5000 1 1 3
.Ve
.PP
And then these rankings are used to compute the correlation
coefficient. 
.PP
\fI1.4. Dealing with Dissimilar Lists of N\-grams:\fR
.IX Subsection "1.4. Dealing with Dissimilar Lists of N-grams:"
.PP
The two input files to rank.pl may not have the same set of n\-grams. In
particular, if one or both of the files generated using statistic.pl
has been generated using a frequency, rank or score cut\-off, then it
is likely that the two files will have different sets of n\-grams. In
such a situation, n\-grams that do not occur in both files are removed,
the n\-grams that remain are re-ranked and then the correlation
coefficient is computed. 
.PP
For example assume the following two files output by statistic.pl
using two fictitious statistical measures from a fictitious file
output by program count.pl.
.PP
The first file: 
.PP
.Vb 4
\& first<>bigram<>1 4.000 1 1 
\& second<>bigram<>2 3.000 2 2 
\& extra<>bigram1<>3 2.000 3 3 
\& third<>bigram<>4 1.000 4 4
.Ve
.PP
The second file:
.PP
.Vb 4
\& second<>bigram<>1 4.000 2 2 
\& extra<>bigram2<>2 3.000 4 4 
\& first<>bigram<>3 2.000 1 1 
\& third<>bigram<>4 1.000 3 3
.Ve
.PP
Observe that the bigrams extra<>bigram1<> in the first file and
extra<>bigram2<> in the second file are not present in both
files. After removing these bigrams and re-ranking the rest, we get the
following files: 
.PP
The modified first file: 
.PP
.Vb 3
\& first<>bigram<>1 4.000 1 1 
\& second<>bigram<>2 3.000 2 2 
\& third<>bigram<>3 1.000 4 4
.Ve
.PP
The modified second file:
.PP
.Vb 3
\& second<>bigram<>1 4.000 2 2 
\& first<>bigram<>2 2.000 1 1 
\& third<>bigram<>3 1.000 3 3
.Ve
.PP
Since each ngram belongs to both files, the correlation coefficient
may be computed on both files. 
.PP
\fI1.5. Example Shell Script rank\-script.sh:\fR
.IX Subsection "1.5. Example Shell Script rank-script.sh:"
.PP
We provide c\-shell script rank\-script.sh that takes a bigram count
file and the names of two libraries and then computes the Spearman's
rank correlation coefficient by making use successively of programs
statistic.pl and rank.pl.
.PP
Run this script like so: rank\-script.sh <lib1> <lib2> <file>
.PP
.Vb 4
\&    where <lib1> is the first library, say dice
\&          <lib2> is the second library, say x2
\&          <file> is the file of ngrams and their frequencies produced
\&                 by program count.pl.
.Ve
.PP
For example, if test.cnt contains bigrams and their frequencies, we
can run it like so to compute the rank correlation coefficient between
dice and x2: 
.PP
.Vb 1
\&    csh rank-script.sh dice x2 test.cnt.
.Ve
.PP
This runs the following commands in succession: 
.PP
.Vb 3
\& perl statistic.pl dice out1 test.cnt
\& perl statistic.pl x2 out2 test.cnt
\& perl rank.pl out1 out2
.Ve
.PP
The intermediate files out1 and out2 are later destroyed. 
.PP
Note that since no command line options are utilized in the running of
program statistic.pl here, this script only works for bigrams and
enforces no cut\-offs. However the script is simple enough to be
manually modified to the user's requirements.
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 3
\& Ted Pedersen, tpederse@umn.edu
\& Satanjeev Banerjee, bane0025@d.umn.edu
\& Bridget McInnes, bthomson@umn.edu
.Ve
.PP
This work has been partially supported by a National Science Foundation
Faculty Early \s-1CAREER\s0 Development award (\e#0092784) and by a Grant-in-Aid  
of Research, Artistry and Scholarship from the Office of the Vice  
President for Research and the Dean of the Graduate School of the  
University of Minnesota.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2000\-2012, Ted Pedersen and Satanjeev Banerjee and Bridget T. McInnes
.PP
This suite of programs is free software; you can redistribute it and/or
modify it under the terms of the \s-1GNU\s0 General Public License as published by the
Free Software Foundation; either version 2 of the License, or (at your option) 
any later version.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT\s0 \s-1ANY\s0
\&\s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A
\&\s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with 
this program; if not, write to the Free Software Foundation, Inc., 59 Temple 
Place \- Suite 330, Boston, \s-1MA\s0  02111\-1307, \s-1USA\s0.
.PP
Note: The text of the \s-1GNU\s0 General Public License is provided in the file 
\&\s-1GPL\s0.txt that you should have received with this distribution. 
