.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "COMBIG 1"
.TH COMBIG 1 "2008-03-25" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
combig.pl \- Combine frequency counts to determine co\-occurrence
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Combines (sums) the frequency counts of bigrams made up of the same pair   
of words in either possible order.  It will   count the number of time two  
words occur together in a bigram  regardless of which one comes first. 
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "\s-1USAGE\s0"
.IX Subsection "USAGE"
.Vb 1
\& combig.pl [OPTIONS] BIGRAM
.Ve
.PP
\fI\s-1INPUT\s0 \s-1PARAMETERS\s0\fR
.IX Subsection "INPUT PARAMETERS"
.IP "* \s-1BIGRAM\s0" 4
.IX Item "BIGRAM"
Specify a file of bigram counts created by \s-1NSP\s0 programs count.pl. 
The entries in \s-1BIGRAM\s0 will be formatted as follows:
.Sp
.Vb 1
\&        word1<>word2<>n11 n1p np1
.Ve
.Sp
Here, word1 is followed by word2 n11 times. word1 occurs as the 1st word in 
total n1p bigrams and word2 occurs as the 2nd word in np1 bigrams. 
.IP "* \s-1OPTIONS\s0" 4
.IX Item "OPTIONS"
.Vb 1
\& --help
.Ve
.Sp
Displays this message.
.Sp
.Vb 1
\& --version
.Ve
.Sp
Displays the version information.
.PP
\fI\s-1OUTPUT\s0\fR
.IX Subsection "OUTPUT"
.PP
combig.pl produces a count of the number of times two words make up a   
bigram in either order, whereas count.pl produces counts for a single 
fixed ordering. In other words, combig.pl combines the counts of bigrams 
that are composed of the same words but in reverse order. While the 
\&\s-1BIGRAM\s0 shows pairs of words forming bigrams, output of combig will show
the pairs of words that are co-occurrences or that co-occur irrespective
of their order.
.PP
e.g. if bigrams 
.PP
.Vb 3
\&        word1<>word2<>n11 n1p np1 
\&and 
\&        word2<>word1<>m11 m1p mp1
.Ve
.PP
are found in \s-1BIGRAM\s0 file, then combig.pl treats these as a single unordered bigram 
.PP
.Vb 1
\&        word1<>word2<>n11+m11 n1p+mp1 np1+m1p
.Ve
.PP
where the new bigram will show a combined contingency table in which the order of words doesn't matter. 
.PP
.Vb 8
\&                        word2           ~word2
\&        ___________________________________________________________
\&         word1  |       n11+m11         n12+m21     | n1p+mp1 
\&                |                                   |
\&        ~word1  |       n21+m12         n22+m22-n   | n2p+mp2-n
\&                ___________________________________________________
\&                        np1+m1p         np2+m2p-n   |  n
\&here the entry
.Ve
.IP "* (word1,word2)=n11+m11" 4
.IX Item "(word1,word2)=n11+m11"
shows the number of bigrams having both word1 and word2 in either order 
.Sp
i.e. word1<>word2 + word2<>word1
.IP "* (word1,~word2)=n12+m21" 4
.IX Item "(word1,~word2)=n12+m21"
shows the number of bigrams having word1 but not word2 at either position
.Sp
i.e. word1<>~word2 + ~word2<>word1
.IP "* (~word1,word2)=n21+m12" 4
.IX Item "(~word1,word2)=n21+m12"
shows the number of bigrams having word2 but not word1 at either position
.Sp
i.e. ~word1<>word2 + word2<>~word1
.IP "* (~word1,~word2)=n22+m22" 4
.IX Item "(~word1,~word2)=n22+m22"
shows the number of bigrams not having word1 nor word2 at either position
.Sp
i.e. ~word1<>~word2 + ~word2<>~word1 \- n 
.Sp
where n=total number of bigrams
.Sp
The mathematical proof of how the cell counts in the above contingency table are
counted is explained in section Proof. 
.PP
When a bigram appears in only one order i.e. 
.PP
word1<>word2<>n11 n1p np1 
.PP
appears but 
.PP
word2<>word1<>m11 m1p mp1 
.PP
does not, then the combined bigram will be same as the original bigram  
that appears. Or in other words, 
.PP
word1<>word2<>n11 n1p np1
.PP
is displayed as it is.
.Sh "\s-1PROOF\s0 \s-1OF\s0 \s-1CORRECTNESS\s0"
.IX Subsection "PROOF OF CORRECTNESS"
A bigram word1<>word2<>n11 n1p np1 represents a contingency table 
.PP
.Vb 7
\&                  word2         ~word2
\&                --------------------------------------
\&        word1   n11     |       n12     |       n1p     
\&                        |               |
\&        ~word1  n21     |       n22     |       n2p
\&                --------------------------------------
\&                np1     |       np2     |       n
.Ve
.PP
while a bigram word2<>word1<>m11 m1p mp1 represents a contingency table
.PP
.Vb 7
\&                  word1         ~word1
\&                --------------------------------------  
\&        word2   m11     |       m12     |       m1p
\&                        |               |
\&        ~word2  m21     |       m22     |       m2p
\&                --------------------------------------
\&                mp1     |       mp2     |       n
.Ve
.PP
Here, 
.PP
.Vb 1
\& n11+n12+n21+n22 = n
.Ve
.PP
Also, 
.PP
.Vb 1
\& m11+m12+m21+m22 = n
.Ve
.PP
combig.pl combines bigram counts into a single order independant word pair 
.PP
.Vb 1
\& word1<>word2<>n11+m11 n12+m21 n21+m12
.Ve
.PP
And the corresponding contingency table will be shown as 
.PP
.Vb 7
\&                        word2           ~word2  
\&                -----------------------------------------
\&        word1   n11+m11   |     n12+m21   |     n1p+mp1
\&                          |               |
\&        ~word1  n21+m12   |     n22+m22-n |     n2p+mp2 
\&                -----------------------------------------
\&                np1+m1p   |     np2+m2p   |     n
.Ve
.PP
The first cell (n11+m11) shows the #bigrams having word1 and word2 
(irrespective of their positions) i.e. word1<>word2 or word2<>word1 
which is n11+m11.
.PP
The second cell (n12+m21) shows the #bigrams having word1 but not 
word2 at any position i.e. word1<>~word2 or ~word2<>word1 which is 
n12+m21.
.PP
The third cell (n21+m12) shows the #bigrams having word2 but not word1 
at any position i.e. ~word1<>word2 or word2<>~word1 which is n21+m12. 
.PP
The fourth cell (m22+n22\-n) shows the #bigrams not having word1 nor
word2 at any position which
.PP
.Vb 1
\& = n - (n11+m11) - (n12+m21) - (n21+m12)
.Ve
.PP
.Vb 1
\& = n - (n11+n12+n21) - (m11+m12+m21)
.Ve
.PP
.Vb 1
\& = n - (n-n22) - (n-m22)
.Ve
.PP
.Vb 1
\& = n22 + m22 - n
.Ve
.PP
Alternative proof \- 
.PP
.Vb 1
\& n22 = m11 + m12 + m21 + X      (a)
.Ve
.PP
.Vb 1
\& m22 = n11 + n12 + n21 + X      (b)
.Ve
.PP
where X = #bigrams not having either word1 or word2. 
.PP
as both n22 and m22 have some terms in common which show the 
bigrams not having either word1 or word2. But,
.PP
.Vb 1
\& m11+m12+m21 = n - m22
.Ve
.PP
Substituting this in eqn (a)
.PP
.Vb 1
\& n22 = n - m22 + X
.Ve
.PP
Or 
.PP
.Vb 1
\& X = n22 + m22 - n
.Ve
.PP
Or add (a) and (b) to get 
.PP
.Vb 1
\& n22+m22 = (n11+m11) + (n12+m21) + (n21+m12) + 2X
.Ve
.PP
rearranging terms, 
.PP
.Vb 1
\& n22+m22 = (n11+n12+n21) + (m11+m12+m21) + 2X
.Ve
.PP
but 
.PP
.Vb 1
\& n11+n12+n21 = n - n22 and
.Ve
.PP
.Vb 1
\& m11+m12+m21 = n - m22
.Ve
.PP
Hence, 
.PP
.Vb 1
\& n22+m22 = (n-n22) + (n-m22) + 2X
.Ve
.PP
.Vb 1
\& 2(n22+m22-n) = 2X
.Ve
.PP
Or 
.PP
.Vb 1
\& (n22+m22-n) = X
.Ve
.PP
which is the fourth cell count. 
.Sh "Viewing Bigrams as Graphs"
.IX Subsection "Viewing Bigrams as Graphs"
In bigrams, the order of words is important. Bigram word1<>word2 shows that 
word2 follows word1. Bigrams can be viewed as a directed graph where a bigram 
word1<>word2 will represent a directed edge e from initial vertex word1 to 
terminal vertex word2(word1\->word2).
.PP
In this case, 
.PP
n11, which is the number of times bigram word1<>word2 occurs, becomes 
the weight of the directed edge word1\->word2. 
.PP
n1p, which is the number of bigrams having word1 at 1st position, becomes
the out degree of vertex word1
.PP
and 
.PP
np1, which is the number of bigrams having word2 at 2nd position, becomes
the in degree of vertex word2
.PP
combig.pl creates a new list of word pairs from these bigrams such that the 
order of words can be ignored. Viewed another way, it converts the directed 
graph of given bigrams to an undirected graph showing new word pairs.
.PP
A pair say 
.PP
.Vb 1
\&        word1<>word2<>n11 n1p np1
.Ve
.PP
shown in the output of combig can be viewed as an undirected edge joining 
word1 and word2 having weight n11. If we count the degree of vertex word1 it 
will be n1p and degree of vertex word2 will be np1. 
.SH "AUTHORS"
.IX Header "AUTHORS"
.Vb 2
\& Amruta Purandare, pura0010@d.umn.edu
\& Ted Pedersen, tpederse@d.umn.edu
.Ve
.PP
.Vb 1
\& Last update 03/22/04 by ADP
.Ve
.PP
This work has been partially supported by a National Science Foundation
Faculty Early \s-1CAREER\s0 Development award (#0092784).
.SH "BUGS"
.IX Header "BUGS"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
http://www.d.umn.edu/~tpederse/nsp.html
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2004, Amruta Purandare and Ted Pedersen
.PP
This program is free software; you can redistribute it and/or modify it under
the terms of the \s-1GNU\s0 General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.
.PP
This program is distributed in the hope that it will be useful, but \s-1WITHOUT\s0
\&\s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0
\&\s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0. See the \s-1GNU\s0 General Public License for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along with
this program; if not, write to
.PP
The Free Software Foundation, Inc.,
59 Temple Place \- Suite 330,
Boston, \s-1MA\s0  02111\-1307, \s-1USA\s0.
