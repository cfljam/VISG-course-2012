.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Text::NSP::Measures::4D::MI 3"
.TH Text::NSP::Measures::4D::MI 3 "2012-01-16" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Text::NSP::Measures::4D::MI \- Perl module that provides error checks and
                              framework to implement Loglikelihood
                              for 4\-grams.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\fIBasic Usage\fR
.IX Subsection "Basic Usage"
.PP
.Vb 1
\&  use Text::NSP::Measures::4D::MI::ll;
.Ve
.PP
.Vb 17
\&  $ll_value = calculateStatistic( 
\&                                  n1111=>8,
\&                                  n1ppp=>306,
\&                                  np1pp=>83,
\&                                  npp1p=>83,
\&                                  nppp1=>57,
\&                                  n11pp=>8,
\&                                  n1p1p=>8,
\&                                  n1pp1=>8,
\&                                  np11p=>83,
\&                                  np1p1=>56,
\&                                  npp11=>56,
\&                                  n111p=>8,
\&                                  n11p1=>8,
\&                                  n1p11=>8,
\&                                  np111=>56,
\&                                  npppp=>15180);
.Ve
.PP
.Vb 8
\&  if( ($errorCode = getErrorCode()))
\&  {
\&    print STDERR $erroCode." - ".getErrorMessage()."\en";
\&  }
\&  else
\&  {
\&    print getStatisticName."value for 4-gram is ".$ll_value."\en";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module is the base class for the Loglikelihood and the True Mutual
Information measures. All these measure are similar. This module provides
error checks specific for these measures, it also implements the
computations that are common to these measures.
.IP "Log-Likelihood measure is computed as Log-Likelihood = 2 * [n1111 * log ( n1111 / m1111 ) + n1112 * log ( n1112 / m1112 ) + n1121 * log ( n1121 / m1121 ) + n1122 * log ( n1122 / m1122 ) + n1211 * log ( n1211 / m1211 ) + n1212 * log ( n1212 / m1212 ) + n1221 * log ( n1221 / m1221 ) + n1222 * log ( n1222 / m1222 ) + n2111 * log ( n2111 / m2111 ) + n2112 * log ( n2112 / m2112 ) + n2121 * log ( n2121 / m2121 ) + n2122 * log ( n2122 / m2122 ) + n2211 * log ( n2211 / m2211 ) + n2212 * log ( n2212 / m2212 ) + n2221 * log ( n2221 / m2221 ) + n2222 * log ( n2222 / m2222 )];" 4
.IX Item "Log-Likelihood measure is computed as Log-Likelihood = 2 * [n1111 * log ( n1111 / m1111 ) + n1112 * log ( n1112 / m1112 ) + n1121 * log ( n1121 / m1121 ) + n1122 * log ( n1122 / m1122 ) + n1211 * log ( n1211 / m1211 ) + n1212 * log ( n1212 / m1212 ) + n1221 * log ( n1221 / m1221 ) + n1222 * log ( n1222 / m1222 ) + n2111 * log ( n2111 / m2111 ) + n2112 * log ( n2112 / m2112 ) + n2121 * log ( n2121 / m2121 ) + n2122 * log ( n2122 / m2122 ) + n2211 * log ( n2211 / m2211 ) + n2212 * log ( n2212 / m2212 ) + n2221 * log ( n2221 / m2221 ) + n2222 * log ( n2222 / m2222 )];"
.PP
All these methods use the ratio of the observed values to expected values,
for computations, and thus have common error checks, so they have been grouped
together.
.Sh "Methods"
.IX Subsection "Methods"
.IP "getValues($count_values) \- This method calls computeMarginalTotals the \fIcomputeObservedValues()\fR and the \fIcomputeExpectedValues()\fR methods to compute the observed and expected values. It checks these values for any errors that might cause the Loglikelihood, \s-1TMI\s0 and \s-1PMI\s0 measures to fail." 4
.IX Item "getValues($count_values) - This method calls computeMarginalTotals the computeObservedValues() and the computeExpectedValues() methods to compute the observed and expected values. It checks these values for any errors that might cause the Loglikelihood, TMI and PMI measures to fail."
\&\s-1INPUT\s0 \s-1PARAMS\s0  : \f(CW$count_values\fR           .. Reference of an hash containing
                                           the count values computed by the
                                           count.pl program.
.Sp
\&\s-1RETURN\s0 \s-1VALUES\s0 : 1/undef           ..returns '1' to indicate success
                                    and an undefined(\s-1NULL\s0) value to indicate
                                    failure.
.ie n .IP "computePMI($n, $m) \- Computes the pmi of a given observed and expected value pair." 4
.el .IP "computePMI($n, \f(CW$m\fR) \- Computes the pmi of a given observed and expected value pair." 4
.IX Item "computePMI($n, $m) - Computes the pmi of a given observed and expected value pair."
\&\s-1INPUT\s0 \s-1PARAMS\s0  : \f(CW$n\fR       ..Observed value
                \f(CW$m\fR       ..Expected value
.Sp
\&\s-1RETURN\s0 \s-1VALUES\s0 : lognm   .. the log of the ratio of
                           observed value to expected
                           value.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ted Pedersen,                University of Minnesota Duluth
                             <tpederse@d.umn.edu>
.PP
Satanjeev Banerjee,          Carnegie Mellon University
                             <satanjeev@cmu.edu>
.PP
Amruta Purandare,            University of Pittsburgh
                             <amruta@cs.pitt.edu>
.PP
Bridget Thomson\-McInnes,     University of Minnesota Twin Cities
                             <bthomson@d.umn.edu>
.PP
Saiyam Kohli,                University of Minnesota Duluth
                             <kohli003@d.umn.edu>
.SH "HISTORY"
.IX Header "HISTORY"
Last updated: \f(CW$Id:\fR \s-1MI\s0.pm,v 1.3 2011/12/23 22:25:05 btmcinnes Exp $
.SH "BUGS"
.IX Header "BUGS"
.SH "SEE ALSO"
.IX Header "SEE ALSO"
<http://groups.yahoo.com/group/ngram/>
.PP
<http://www.d.umn.edu/~tpederse/nsp.html>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (C) 2000\-2011, Ted Pedersen, Satanjeev Banerjee, Amruta
Purandare, Bridget Thomson-McInnes and Saiyam Kohli
.PP
This program is free software; you can redistribute it and/or modify it
under the terms of the \s-1GNU\s0 General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.
.PP
This program is distributed in the hope that it will be useful, but
\&\s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of \s-1MERCHANTABILITY\s0
or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.  See the \s-1GNU\s0 General Public License
for more details.
.PP
You should have received a copy of the \s-1GNU\s0 General Public License along
with this program; if not, write to
.PP
.Vb 3
\&    The Free Software Foundation, Inc.,
\&    59 Temple Place - Suite 330,
\&    Boston, MA  02111-1307, USA.
.Ve
.PP
Note: a copy of the \s-1GNU\s0 General Public License is available on the web
at <http://www.gnu.org/licenses/gpl.txt> and is included in this
distribution as \s-1GPL\s0.txt.
